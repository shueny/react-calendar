{"version":3,"sources":["components/Home/index.js","components/Calendar/components/Header/index.js","components/Calendar/components/Content/index.js","components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","props","className","current","state","onChangeState","onChangeMonth","monthFormat","month","getMonth","year","getFullYear","console","log","onClick","icon","faAngleLeft","faAngleRight","weeks","source","isCurrentMonth","date","map","v","i","key","substring","el","value","isCurrent","_MONTH_FORMAT","_WEEK_FORMAT","now","Date","useState","getDay","getDate","setCurrent","currnetMonth","setCurrnetMonth","setCurrnetMonthFirstDay","currnetMonthFirstDayOfWeek","setCurrnetMonthFirstDayOfWeek","currnetMonthLastDay","setCurrnetMonthLastDay","currnetMonthLastDayOfWeek","setCurrnetMonthLastDayOfWeek","lastMonthLastDay","setLastMonthLastDay","setSource","changeState","setChangeState","fetchDates","dates","targetDate","a","arr","push","fetchData","init","arrayDates","resBefore","resCurrent","resNext","useEffect","handleChangeMonth","newMonth","newMonthFirstDay","newMonthFirstDayOfWeek","newMonthLastDay","newMonthLastDayOfWeek","newLastMonthLastDay","lastDate","months","onChange","MonthElement","App","path","component","Home","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68d29bf5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Calendar } from \"../index\";\nimport \"./Home.css\";\n\nconst Index = (props) => {\n    return (\n        <div className=\"cal-home\">\n            <div className=\"cal-home-grid\">\n                <Calendar />\n            </div>\n        </div>\n    );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';\n\n\nimport './Header.css'\n\nconst Index = (props) => {\n    const { current, state, onChangeState, onChangeMonth, monthFormat } = props;\n    const month = current.getMonth();\n    const year = current.getFullYear()\n    console.log(current)\n    return (\n        <div className='cal-calendar-header'>\n            <div className=\"cal-calendar-header-container\">\n                <button onClick={ () => onChangeMonth(month - 1) }>\n                    <FontAwesomeIcon icon={ faAngleLeft } /></button>\n                <div className=\"cal-calendar-header-title-container item-clickable\" onClick={ () => onChangeState(state === 'date' ? 'month' : 'year') }>\n                    <span className='cal-calendar-header-title'>{ monthFormat[month] }</span>\n                    <span className='cal-calendar-header-title'>{ year }</span>\n                </div>\n                <button onClick={ () => onChangeMonth(month + 1) }>\n                    <FontAwesomeIcon icon={ faAngleRight } /></button>\n            </div>\n        </div>\n    );\n};\n\nexport default Index;\n","import React from \"react\";\nimport \"./Content.css\";\n\nconst Index = (props) => {\n    const { weeks, source, isCurrentMonth, date } = props;\n    if (!source) return null;\n\n    return (\n        <div className=\"cal-content-container\">\n            <div className=\"cal-content-grid\">\n                <div className=\"cal-content-grid-weeks\">\n                    { weeks.map((v, i) => {\n                        return (\n                            <div key={ `week-${i}` } className=\"item\">\n                                { v.substring(0, 3) }\n                            </div>\n                        );\n                    }) }\n                </div>\n                <div className=\"cal-content-grid-dates\">\n                    { source.map((el, i) => {\n                        return (\n                            <div\n                                className={ `item${isCurrentMonth && date === el.value\n                                        ? \" active\"\n                                        : \"\"\n                                    }${el.isCurrent === false ? \" grey\" : \"\"}` }\n                                key={ `date-${i}` }>\n                                { el.value }\n                            </div>\n                        );\n                    }) }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Index;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport \"./Calendar.css\";\n\nconst _MONTH_FORMAT = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n];\nconst _WEEK_FORMAT = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n];\n\nconst Index = (props) => {\n    const now = new Date();\n    const [year, setYear] = useState(now.getFullYear());\n    const [month, setMonth] = useState(now.getMonth());\n    const [week, setWeek] = useState(now.getDay());\n    const [date, seDate] = useState(now.getDate());\n    const [current, setCurrent] = useState(\n        new Date(now.getFullYear(), now.getMonth(), 1)\n    );\n    const [currnetMonth, setCurrnetMonth] = useState(\n        new Date(now.getFullYear(), now.getMonth(), 1).getMonth()\n    );\n    const [currnetMonthFirstDay, setCurrnetMonthFirstDay] = useState(\n        new Date(now.getFullYear(), now.getMonth(), 1).getDate()\n    );\n    const [\n        currnetMonthFirstDayOfWeek,\n        setCurrnetMonthFirstDayOfWeek,\n    ] = useState(new Date(now.getFullYear(), now.getMonth(), 1).getDay());\n    const [currnetMonthLastDay, setCurrnetMonthLastDay] = useState(\n        new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()\n    );\n    const [currnetMonthLastDayOfWeek, setCurrnetMonthLastDayOfWeek] = useState(\n        new Date(now.getFullYear(), now.getMonth() + 1, 0).getDay()\n    );\n    const [lastMonthLastDay, setLastMonthLastDay] = useState(\n        new Date(now.getFullYear(), now.getMonth(), 0).getDate()\n    );\n\n    const [source, setSource] = useState([]);\n\n    const [changeState, setChangeState] = useState(\"date\");\n\n    const fetchDates = async (dates, targetDate, isCurrent) => {\n        // console.log(\"fetchDate:\", dates, targetDate);\n        let arr = [];\n        for (let i = dates; i <= targetDate; i++) {\n            // console.log(i, dates, targetDate);\n            arr.push({ isCurrent, value: i });\n        }\n        return arr;\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const fetchData = async (init) => {\n        let arrayDates = [];\n\n        if (currnetMonthFirstDayOfWeek !== 0) {\n            const resBefore = await fetchDates(\n                lastMonthLastDay - currnetMonthFirstDayOfWeek + 1,\n                lastMonthLastDay,\n                false\n            );\n            console.log(\"resBefore:\", resBefore);\n\n            arrayDates = [...arrayDates, ...resBefore];\n        }\n        const resCurrent = await fetchDates(1, currnetMonthLastDay, true);\n\n        arrayDates = [...arrayDates, ...resCurrent];\n\n        if (currnetMonthLastDayOfWeek !== 6) {\n            const resNext = await fetchDates(\n                1,\n                6 - currnetMonthLastDayOfWeek,\n                false\n            );\n\n            arrayDates = [...arrayDates, ...resNext];\n        }\n\n        setSource([...arrayDates]);\n    };\n\n    useEffect(\n        () => {\n            fetchData();\n        },\n        [currnetMonth]\n    );\n\n    // let day = dayOfWeek(30, 8, 2010);\n\n    const hanleChangeState = (value) => {\n        console.log(value);\n        setChangeState(value);\n\n        if (value === \"month\") {\n            setCurrnetMonth(\"\");\n        }\n    };\n\n    const handleChangeMonth = (value) => {\n        const init = {\n            newMonth: new Date(year, value, 1).getMonth(),\n            newMonthFirstDay: new Date(year, value, 1).getDate(),\n            newMonthFirstDayOfWeek: new Date(year, value, 1).getDay(),\n            newMonthLastDay: new Date(year, value + 1, 0).getDate(),\n            newMonthLastDayOfWeek: new Date(year, value + 1, 0).getDay(),\n            newLastMonthLastDay: new Date(year, value, 0).getDate(),\n        };\n\n        setCurrent(new Date(year, value, 1));\n        setCurrnetMonth(value);\n        setCurrnetMonthFirstDay(new Date(year, value, 1).getDate());\n        setCurrnetMonthFirstDayOfWeek(new Date(year, value, 1).getDay());\n        setCurrnetMonthLastDay(new Date(year, value + 1, 0).getDate());\n        setCurrnetMonthLastDayOfWeek(new Date(year, value + 1, 0).getDay());\n        setLastMonthLastDay(new Date(year, value, 0).getDate());\n\n        fetchData(init);\n        setChangeState(\"date\");\n    };\n\n    return (\n        <div className=\"cal-calendar\">\n            <h1>CalendaR</h1>\n            <div className=\"cal-calendar-grid\">\n                <Header\n                    monthFormat={_MONTH_FORMAT}\n                    month={currnetMonth}\n                    year={year}\n                    onChangeState={hanleChangeState}\n                    onChangeMonth={handleChangeMonth}\n                    current={current}\n                    state={changeState}\n                />\n                {changeState === \"date\" && (\n                    <Content\n                        weeks={_WEEK_FORMAT}\n                        lastDate={currnetMonthLastDay}\n                        source={source}\n                        isCurrentMonth={month === currnetMonth}\n                        date={date}\n                    />\n                )}\n                {changeState === \"month\" && (\n                    <MonthElement\n                        months={_MONTH_FORMAT}\n                        onChange={handleChangeMonth}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Index;\n\nconst MonthElement = (props) => {\n    const { months, onChange } = props;\n    return (\n        <div className=\"cal-month-grid\">\n            {months.map((el, i) => {\n                return (\n                    <div\n                        className=\"item item-clickable\"\n                        key={`month-${el}`}\n                        onClick={() => onChange(i)}>\n                        {el}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Home } from './components'\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/react-calendar/\" component={ Home } exact />\n        </Switch>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}